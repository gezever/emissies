shiny::runApp()
package.install(dplyr)
install.packages(dplyr)
install.packages("dplyr")
runApp()
runApp()
install.packages("DT")
runApp()
runApp()
runApp()
runApp()
emissies <- read.csv(file = "data/filename.csv")
saveRDS(emissies, file = "data/emissies.rds")
runApp()
runApp()
runApp()
runApp()
emissies <- read.csv(file = "data/filename2.csv")
saveRDS(emissies, file = "data/emissies.rds")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
emissies <- read.csv(file = "data/filename.csv")
saveRDS(emissies, file = "data/emissies.rds")
runApp()
emissies <- read.csv(file = "data/filename2.csv")
saveRDS(emissies, file = "data/emissies.rds")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
emissies <- read.csv(file = "data/alle_emissies.csv")
saveRDS(emissies, file = "data/emissies.rds")
runApp()
runApp()
runApp()
runApp()
emissies <- read.csv(file = "data/alle_emissies.csv")
saveRDS(emissies, file = "data/emissies.rds")
runApp()
runApp()
emissies <- read.csv(file = "data/filename2.csv")
saveRDS(emissies, file = "data/emissies.rds")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
emissies <- read.csv(file = "data/alle_emissies.csv")
saveRDS(emissies, file = "data/emissies.rds")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rsconnect::deployApp('/home/gehau/git/shiny-examples/emissies_lucht')
runApp()
rsconnect::deployApp('/home/gehau/git/shiny-examples/emissies_lucht')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("ade4")
require(ade4);s.value(cbind(latitude,longitute),log(hoeveelheid+1))
ade4::s.value(cbind(latitude,longitute),log(hoeveelheid+1))
require(ade4)
require("ade4")
install.packages("ade4")
shiny::runApp()
library(SPARQL)
library(SPARQL)
# Step 1 - Set up preliminaries and define query
# Define the data.gov endpoint
endpoint <- "https://id-ontwikkel.milieuinfo.be/imjv/sparql"
# create query statement
query <- "
PREFIX milieu: <http://id.milieuinfo.be/def#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX geo: <http://www.w3.org/2003/01/geo/wgs84_pos#>
PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
PREFIX http: <http://www.w3.org/2011/http#>
PREFIX sdmx: <http://purl.org/linked-data/sdmx/2009/attribute#>
PREFIX locn: <http://www.w3.org/ns/locn#>
PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT ?jaar ?stof ?hoeveelheid ?eenheid ?latitude ?longitude ?refgebied ?CD_MUNTY_REFNIS
WHERE {
?subject <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://purl.org/linked-data/cube#Observation> ;
milieu:referentiegebied ?refgebied ;
milieu:hoeveelheid ?hoeveelheid ;
sdmx:unitMeasure ?unit ;
milieu:tijdsperiode ?jaar ;
milieu:substantie ?substantie .
FILTER ( ?hoeveelheid > 0 )
?substantie  skos:prefLabel ?stof.
?refgebied <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://id.milieuinfo.be/def#Emissiepunt> ;
milieu:exploitatie ?xtie ;
geo:lat ?latitude ;
geo:long ?longitude .
?unit skos:altLabel ?eenheid .
}
"
# Step 2 - Use SPARQL package to submit query and save results to a data frame
qd <- SPARQL(endpoint,query)
df <- qd$results
#print(df, quote = TRUE, row.names = FALSE)
full_table<-rbind(df)?
write.csv(full_table, file = "data/full_table1.csv")
